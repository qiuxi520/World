/* 全局重置样式（Reset CSS），用于消除浏览器默认样式带来的不一致性。

*
通配符选择器，表示匹配 HTML 中的所有元素。

margin: 0;
清除所有元素的默认外边距（浏览器为某些元素如 <body>、<h1>-<h6>、<p> 等添加的默认外边距）。

padding: 0;
清除所有元素的默认内边距（如 <ul>、<ol> 的左侧内边距）。

box-sizing: border-box;
修改盒模型计算方式，使元素的 width 和 height 包含边框（border）和内边距（padding），而非默认的 content-box。

*/
*{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}


/* 对 <body> 元素样式的全局定义 

1. display: flex;
作用：将 <body> 变为 Flex 容器，其直接子元素（如 .content）成为 Flex 项目（Flex Items）。
效果：启用 Flexbox 布局模型，方便控制子元素的排列和对齐。

2. justify-content: center;
作用：控制子元素在 主轴（水平方向） 上的对齐方式。
效果：所有子元素水平居中（因为 flex-direction: column 后主轴变为垂直方向，此属性实际控制垂直居中，见第4点解释）。

3. align-items: center;
作用：控制子元素在 交叉轴（垂直方向） 上的对齐方式。
效果：所有子元素垂直居中（flex-direction: column 下交叉轴为水平方向，此属性实际控制水平居中）。

4. flex-direction: column;
作用：设置 Flex 容器的主轴方向为 垂直方向（默认是水平的 row）。
关键影响：

子元素会从上到下垂直排列。

justify-content 现在控制垂直方向的对齐，align-items 控制水平方向的对齐（与默认行为相反）。

5. background: #050801;
作用：设置背景颜色为深黑色（十六进制色值 #050801）。

6. font-family: 'Raleway', sans-serif;
作用：设置默认字体为 Raleway，若不可用则回退到系统无衬线字体（如 Arial）。
注意：需确保已通过 <link> 或 @import 加载 Raleway 字体（如 Google Fonts）。

7. font-weight: bold;
作用：设置默认字体粗细为粗体。

**8. `height: 100vh;``
作用：设置 <body> 高度为 100% 视口高度（vh = viewport height）。
效果：确保页面始终撑满整个屏幕高度，无论内容多少。

最终效果
这段代码会让 <body> 内的所有直接子元素：
垂直排列（从上到下）。
水平和垂直居中（在屏幕正中央）。
背景为深黑色，使用 Raleway 粗体字体。
整个页面高度占满屏幕。
*/
body{
    display: flex;
    justify-content: center;
    align-items: center;

    flex-direction: column;
    background: #050801;
    font-family: 'Raleway', sans-serif;
    /* font-weight: bold; */
    height: 150vh;
}

/* 超链接 */
a {
    text-decoration: none;
}


/* .content 类选择器，创建一个 垂直排列、居中对齐的弹性盒子（Flexbox）布局
1. display: flex;
作用：将 .content 元素变为 Flex 容器，其直接子元素（如 .logo、.nav、.content2）自动成为 Flex 项目（Flex Items）。
效果：启用 Flexbox 布局模型，可以轻松控制子元素的排列和对齐方式。

2. flex-direction: column;
作用：设置 Flex 容器的主轴方向为 垂直方向（默认是水平的 row）。
效果：子元素会从上到下 垂直排列（而不是默认的从左到右水平排列）。

justify-content 现在控制 垂直方向 的对齐，align-items 控制 水平方向 的对齐（与默认行为相反）。

3. justify-content: center;
作用：控制子元素在 主轴（垂直方向） 上的对齐方式。
效果：所有子元素 在垂直方向上居中（整体内容会在容器内垂直居中）。

4. align-items: center;
作用：控制子元素在 交叉轴（水平方向） 上的对齐方式。
效果：所有子元素 在水平方向上居中（每个子元素的内容水平居中）。

5. gap: 5px;
作用：设置子元素之间的 间距（包括 .logo、.nav、.content2 之间的间隙）。
效果：每个子元素之间会有 5像素的间隔。替代传统的 margin 方式，更简洁且不会导致外边距合并问题。

最终效果
这段代码会让 .content 容器内的所有直接子元素：
垂直排列（从上到下）。
整体垂直居中（在父容器内上下居中）。
每个子元素水平居中（内容左右居中）。
子元素之间有 5px 的固定间距。
 */
.content {
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;
    gap: 5px; /* 给子元素之间添加间距 */
}

/* 头像 */
/* #region */
.logo{
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;
    height: 60%;
}
.logo img{

    border-radius: 10%;
    height: 50%;
     margin-bottom: 0; /* 移除图片下边距 */
    padding-bottom: 0; /* 移除图片内边距 */
}
/* #endregion */

/* 艺术字 */
.h1-special {
    color: rgb(206, 192, 6);
    font-family: 'Zhi Mang Xing', cursive;
    font-size: 40px;
    font-weight: 150;
    opacity: 0;
    animation: fadeIn 8s ease-in-out forwards;
    pointer-events: auto;/* 允许点击超链接 */
    z-index: 3;/* 保证在最上层显示 */
}
/* 实现元素的淡入放大效果 */
@keyframes fadeIn {
    from {
        opacity: 0;
        transform: scale(0.1);
    }
    to {
        opacity: 1;
        transform: scale(1);
    }
}

/*  */
/* #region */
/* 使用Flex布局使内容居中（水平和垂直）

左侧留有70px外边距

高度为父元素的30% */
.nav{
    display: flex;
    justify-content: center;
    align-items: center;
    margin-left: 70px;
    height: 30%
}

/* 导航链接样式：.nav 下的所有 <a> 元素
每个链接有25px上下/30px左右的padding
40px的上下外边距和50px的右外边距
亮青色文字颜色(#03e9f4)
大写字母转换
有0.5秒的过渡效果 */
.nav a{

    position: relative;
    display: inline-block;
    padding: 25px 30px;
    margin: 40px 0;
    color: #03e9f4;
    text-decoration: none;
    text-transform: uppercase;
    transition: 0.5s;
    letter-spacing: 4px;
    overflow: hidden;
    margin-right: 50px;
    animation: fadeIn 8s ease-in-out forwards;
}

/* 悬停效果
当鼠标悬停在链接上时：当鼠标悬停在 <a> 链接上时触发的样式
背景变为亮青色
文字颜色变为深色(#050801)
添加多层发光阴影效果（类似霓虹灯）
添加底部反射效果（使用-webkit-box-reflect）
悬停时放大 8% */
.nav a:hover{
    background: #03e9f4;
    color: #050801;
    box-shadow: 0 0 5px #03e9f4,
                0 0 25px #03e9f4,
                0 0 50px #03e9f4,
                0 0 200px #03e9f4;
    -webkit-box-reflect:below 1px linear-gradient(transparent, #0005);
}

/* 每个链接通过filter: hue-rotate()应用不同色调：

第1个链接：310度色相旋转（偏粉紫色）

第2个链接：210度色相旋转（偏蓝色）

第3个链接：110度色相旋转（偏青绿色）

第4个链接：10度色相旋转（偏橙红色） */
.nav a:nth-child(1) {
    filter: hue-rotate(310deg);
}
.nav a:nth-child(2) {
    filter: hue-rotate(210deg);
}
.nav a:nth-child(3) {
    filter: hue-rotate(110deg);
}
.nav a:nth-child(4) {
    filter: hue-rotate(10deg);
}

/* 选择 导航链接 <a> 内的所有 <span> 元素（用于边框动画） */
.nav a span {
    position: absolute;
    display: block;
}
/* 每个链接有4个span元素，分别创建4个方向的边框动画：

顶部边框（span:nth-child(1)）：
从左到右滑入的2px高横线
使用animate1动画（1秒无限循环）

右侧边框（span:nth-child(2)）：
从上到下滑入的2px宽竖线
延迟0.25秒启动

底部边框（span:nth-child(3)）：
从右到左滑入的2px高横线
延迟0.5秒启动

左侧边框（span:nth-child(4)）：
从下到上滑入的2px宽竖线
延迟0.75秒启动 */
.nav a span:nth-child(1){
    /* 将span定位在其父元素(.nav a)的顶部边缘，并设置为100%宽度和2px高度，形成一个细长的水平条。 */
    top: 0;
    left: 0;
    width: 100%;
    height: 2px;

    /* 创建一个从左到右的渐变背景：
    起始点：完全透明（transparent）
    结束点：亮青色（#03e9f4） 
    
    0deg：从下到上 ↑
    90deg：从左到右 →
    180deg：从上到下 ↓
    270deg：从右到左 ←
*/
    background: linear-gradient(90deg,transparent,#03e9f4);

    /* animate1：动画名称（需配合@keyframes使用）。
    1s：动画时长1秒。
    linear：匀速运动。
    infinite：无限循环。 */
    animation: animate1 1s linear infinite;
}
@keyframes animate1{
    0%{left: -100%;}
    50%,100%{left: 100%;}
}

.nav a span:nth-child(2){
    top: -100%;
    right: 0;
    width: 2px;
    height: 100%;
    background: linear-gradient(180deg,transparent,#03e9f4);
    animation: animate2 1s linear infinite;
    animation-delay: 0.25s;
}
@keyframes animate2{
    0%{top: -100%;}
    50%,100%{top: 100%;}
}

.nav a span:nth-child(3){
    bottom: 0;
    right: 0;
    width: 100%;
    height: 2px;
    background: linear-gradient(270deg,transparent,#03e9f4);
    animation: animate3 1s linear infinite;
    animation-delay: 0.50s;
}
@keyframes animate3{
    0%{right: -100%;}
    50%,100%{right: 100%;}
}

.nav a span:nth-child(4){
    bottom: -100%;
    left: 0;
    width: 2px;
    height: 100%;
    background: linear-gradient(360deg,transparent,#03e9f4);
    animation: animate4 1s linear infinite;
    animation-delay: 0.75s;
}
@keyframes animate4{
    0%{bottom: -100%;}
    50%,100%{bottom: 100%;}
}
/* #endregion */



/* 创建一个 具有半透明背景、圆角边框且居中对齐的内容容器
1. 容器宽度与边距
max-width: 1200px;
限制容器的最大宽度为 1200px（防止内容在大屏幕上过宽，保持可读性）。
margin: 2rem auto;
上下边距为 2rem（约 32px，根据根字体大小计算），左右边距为 auto，实现 水平居中。
（注释掉的 margin: 0 auto 是更紧凑的无上下边距版本）。

2. 内边距与文本对齐
padding: 2rem;
容器内边距为 2rem，确保内容与边框之间有足够的呼吸空间。
text-align: center;
容器内所有文本（及行内元素）水平居中显示。

3. 背景与圆角
background-color: rgba(255, 255, 255, 0.5);
设置半透明白色背景（0.5 表示 50% 透明度），增强文字可读性的同时保留背景若隐若现的效果。
border-radius: 10px;
添加 10px 圆角，使容器边缘更柔和。

4. 定位与层级
position: relative;
将容器设为相对定位（为子元素的绝对定位提供参照，但当前代码中未使用子元素绝对定位）。
z-index: 3;
设置较高的堆叠层级，确保容器显示在其他低 z-index 元素（如粒子背景）之上。

5. 被注释掉的垂直居中代码
position: absolute;
top: 50%;
left: 50%;
transform: translate(-50%, -50%);
这段注释代码原本用于 绝对定位 + 偏移 实现精准垂直水平居中，但已被更灵活的 Flexbox 或 Grid 布局替代（由父容器控制居中，如 .content 的 display: flex）。

最终效果
视觉表现：
一个宽度受限、半透明、圆角的卡片式容器，内容居中显示，与周围元素保持距离。

典型用途：
公告栏、提示框。
博客文章摘要容器。
仪表盘中的数据卡片。

*/
.content2 {
    max-width: 800px;
    /* margin: 0 auto; */
     margin: 2rem auto; 
    padding: 2rem;
    text-align: center;
    flex-direction: column;
    
    /* 半透明背景增强文字可读性 */
    background-color: rgba(255, 255, 255, 0.5);
    border-radius: 10px;
    
    /* 垂直居中技巧 */
    /* position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%); */

    position: relative; /* 改为相对定位 */
    z-index: 3;
}

/* 背景粒子图层 */
#particles-js {
    position: fixed;
    width: 100%;
    height: 150%;
    background: transparent;
    z-index: 1; /* 粒子层在较低层级 */
    pointer-events: auto; /* 允许粒子层与鼠标交互 */
}

/* 选择除 #particles-js 外的所有 div 元素 */
div:not(#particles-js) {
    width: 100vw;
    height: 100vh;
    background-size: cover;
    background-repeat: no-repeat;
    background-position: center;
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
    z-index: 2; /* 文字容器层级高于粒子层 */
    pointer-events: none; /* 防止阻止粒子层的鼠标事件 */
}

/* 鼠标拖尾效果图层 */
#trail-canvas {
    position: fixed;
    top: 0;
    left: 0;
    z-index: 0; /* 最底层 */
    pointer-events: none; /* 不阻止鼠标事件 */
}

/* 未启用 */
.footer{
    display: flex;
    justify-content: center;
    align-items: center;
    /*background-color: white;*/

}

/* 当屏幕宽度 ≤ 960px 时，自动应用这些样式规则，优化移动端显示效果。 */
@media screen and (max-width: 960px) {



    .content {
        flex-direction: column;
        height: auto;
        min-height: 10vh;
        padding: 5px 0;
         padding-top: 200px;
    }

    .logo {
        height: auto;
        margin-bottom: 20px;
        flex-direction: column;

    }
    .logo img {
        height: 150px;
        width: 150px;
        margin: 0 auto;
        border-radius: 50%;
        
    }


    .nav {
        flex-direction: column;
        margin-left: 0;
        width: 100%;
        flex-wrap: wrap;
        justify-content: center;
        gap: 15px;

    }
    .nav a {
        padding: 15px 20px;
        margin: 10px;
        font-size: 14px;
        letter-spacing: 2px;
    }



    .nav a span:nth-child(1),
    .nav a span:nth-child(3) {
        width: 80%;
    }


    .nav a span:nth-child(2),
    .nav a span:nth-child(4) {
        height: 80%;
    }


}

